name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create a release (even if no changes)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: read
  security-events: write

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_OUTPUT_DIRECTORY: ${{ github.workspace }}/nuget

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella

  semantic-versioning:
    name: Semantic Versioning
    runs-on: ubuntu-latest  # Use GitHub runners for semantic release to avoid permission issues
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    outputs:
      version: ${{ steps.semantic.outputs.new_version }}
      changelog: ${{ steps.semantic.outputs.changelog }}
      released: ${{ steps.semantic.outputs.new_release_published }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Semantic Release
      id: semantic
      run: npm run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: semantic-release-bot
        GIT_AUTHOR_EMAIL: semantic-release-bot@martynus.net
        GIT_COMMITTER_NAME: semantic-release-bot
        GIT_COMMITTER_EMAIL: semantic-release-bot@martynus.net

  package-and-publish:
    name: Package and Publish NuGet
    runs-on: ubuntu-latest
    needs: [build-and-test, semantic-versioning]
    if: always() && github.ref == 'refs/heads/main' && needs.build-and-test.result == 'success' && needs.semantic-versioning.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Set version
      run: |
        VERSION="${{ needs.semantic-versioning.outputs.version }}"
        if [ -z "$VERSION" ]; then
          VERSION="1.0.0-preview.$(date +%Y%m%d%H%M%S)"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version set to: $VERSION"

    - name: Build for packaging
      run: dotnet build --configuration Release --no-restore -p:Version=${{ env.PACKAGE_VERSION }}

    - name: Create NuGet packages
      run: dotnet pack --configuration Release --no-build --output ${{ env.NUGET_OUTPUT_DIRECTORY }} -p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.NUGET_OUTPUT_DIRECTORY }}/*.nupkg

    - name: Publish to NuGet.org
      if: github.event_name == 'release'
      run: |
        dotnet nuget push ${{ env.NUGET_OUTPUT_DIRECTORY }}/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate

    - name: Publish to GitHub Packages
      run: |
        dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        dotnet nuget push ${{ env.NUGET_OUTPUT_DIRECTORY }}/*.nupkg \
          --source "github" \
          --skip-duplicate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest  # Use GitHub runners for security scanning to avoid local environment issues
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Security audit
      run: dotnet list package --vulnerable --include-transitive

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3